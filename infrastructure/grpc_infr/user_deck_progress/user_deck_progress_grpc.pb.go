// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/user_deck_progress.proto

package user_deck_progress

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserDeckProgressService_GetUserLearningProgressDecks_FullMethodName = "/user_deck_progress.UserDeckProgressService/GetUserLearningProgressDecks"
	UserDeckProgressService_SelectDecksForTodayReview_FullMethodName    = "/user_deck_progress.UserDeckProgressService/SelectDecksForTodayReview"
	UserDeckProgressService_DeleteDeckFromLearningDecks_FullMethodName  = "/user_deck_progress.UserDeckProgressService/DeleteDeckFromLearningDecks"
)

// UserDeckProgressServiceClient is the client API for UserDeckProgressService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserDeckProgressServiceClient interface {
	GetUserLearningProgressDecks(ctx context.Context, in *GetUserLearningProgressDecksRequest, opts ...grpc.CallOption) (*GetUserLearningProgressDecksResponse, error)
	SelectDecksForTodayReview(ctx context.Context, in *UserProgressDecks, opts ...grpc.CallOption) (*UserProgressDecks, error)
	DeleteDeckFromLearningDecks(ctx context.Context, in *DeleteDeckFromLearningDecksRequest, opts ...grpc.CallOption) (*DeleteDeckFromLearningDecksResponse, error)
}

type userDeckProgressServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserDeckProgressServiceClient(cc grpc.ClientConnInterface) UserDeckProgressServiceClient {
	return &userDeckProgressServiceClient{cc}
}

func (c *userDeckProgressServiceClient) GetUserLearningProgressDecks(ctx context.Context, in *GetUserLearningProgressDecksRequest, opts ...grpc.CallOption) (*GetUserLearningProgressDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetUserLearningProgressDecksResponse)
	err := c.cc.Invoke(ctx, UserDeckProgressService_GetUserLearningProgressDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeckProgressServiceClient) SelectDecksForTodayReview(ctx context.Context, in *UserProgressDecks, opts ...grpc.CallOption) (*UserProgressDecks, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UserProgressDecks)
	err := c.cc.Invoke(ctx, UserDeckProgressService_SelectDecksForTodayReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userDeckProgressServiceClient) DeleteDeckFromLearningDecks(ctx context.Context, in *DeleteDeckFromLearningDecksRequest, opts ...grpc.CallOption) (*DeleteDeckFromLearningDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteDeckFromLearningDecksResponse)
	err := c.cc.Invoke(ctx, UserDeckProgressService_DeleteDeckFromLearningDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserDeckProgressServiceServer is the server API for UserDeckProgressService service.
// All implementations must embed UnimplementedUserDeckProgressServiceServer
// for forward compatibility.
type UserDeckProgressServiceServer interface {
	GetUserLearningProgressDecks(context.Context, *GetUserLearningProgressDecksRequest) (*GetUserLearningProgressDecksResponse, error)
	SelectDecksForTodayReview(context.Context, *UserProgressDecks) (*UserProgressDecks, error)
	DeleteDeckFromLearningDecks(context.Context, *DeleteDeckFromLearningDecksRequest) (*DeleteDeckFromLearningDecksResponse, error)
	mustEmbedUnimplementedUserDeckProgressServiceServer()
}

// UnimplementedUserDeckProgressServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserDeckProgressServiceServer struct{}

func (UnimplementedUserDeckProgressServiceServer) GetUserLearningProgressDecks(context.Context, *GetUserLearningProgressDecksRequest) (*GetUserLearningProgressDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetUserLearningProgressDecks not implemented")
}
func (UnimplementedUserDeckProgressServiceServer) SelectDecksForTodayReview(context.Context, *UserProgressDecks) (*UserProgressDecks, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectDecksForTodayReview not implemented")
}
func (UnimplementedUserDeckProgressServiceServer) DeleteDeckFromLearningDecks(context.Context, *DeleteDeckFromLearningDecksRequest) (*DeleteDeckFromLearningDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteDeckFromLearningDecks not implemented")
}
func (UnimplementedUserDeckProgressServiceServer) mustEmbedUnimplementedUserDeckProgressServiceServer() {
}
func (UnimplementedUserDeckProgressServiceServer) testEmbeddedByValue() {}

// UnsafeUserDeckProgressServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserDeckProgressServiceServer will
// result in compilation errors.
type UnsafeUserDeckProgressServiceServer interface {
	mustEmbedUnimplementedUserDeckProgressServiceServer()
}

func RegisterUserDeckProgressServiceServer(s grpc.ServiceRegistrar, srv UserDeckProgressServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserDeckProgressServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserDeckProgressService_ServiceDesc, srv)
}

func _UserDeckProgressService_GetUserLearningProgressDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetUserLearningProgressDecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeckProgressServiceServer).GetUserLearningProgressDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeckProgressService_GetUserLearningProgressDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeckProgressServiceServer).GetUserLearningProgressDecks(ctx, req.(*GetUserLearningProgressDecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeckProgressService_SelectDecksForTodayReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UserProgressDecks)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeckProgressServiceServer).SelectDecksForTodayReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeckProgressService_SelectDecksForTodayReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeckProgressServiceServer).SelectDecksForTodayReview(ctx, req.(*UserProgressDecks))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserDeckProgressService_DeleteDeckFromLearningDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteDeckFromLearningDecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserDeckProgressServiceServer).DeleteDeckFromLearningDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserDeckProgressService_DeleteDeckFromLearningDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserDeckProgressServiceServer).DeleteDeckFromLearningDecks(ctx, req.(*DeleteDeckFromLearningDecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserDeckProgressService_ServiceDesc is the grpc.ServiceDesc for UserDeckProgressService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserDeckProgressService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_deck_progress.UserDeckProgressService",
	HandlerType: (*UserDeckProgressServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetUserLearningProgressDecks",
			Handler:    _UserDeckProgressService_GetUserLearningProgressDecks_Handler,
		},
		{
			MethodName: "SelectDecksForTodayReview",
			Handler:    _UserDeckProgressService_SelectDecksForTodayReview_Handler,
		},
		{
			MethodName: "DeleteDeckFromLearningDecks",
			Handler:    _UserDeckProgressService_DeleteDeckFromLearningDecks_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_deck_progress.proto",
}
