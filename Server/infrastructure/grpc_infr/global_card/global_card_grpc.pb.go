// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/global_card.proto

package global_card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlobalCardService_CreateGlobalCard_FullMethodName       = "/global_card.GlobalCardService/CreateGlobalCard"
	GlobalCardService_GetGlobalCardsByDeckID_FullMethodName = "/global_card.GlobalCardService/GetGlobalCardsByDeckID"
	GlobalCardService_UpdateGlobalCard_FullMethodName       = "/global_card.GlobalCardService/UpdateGlobalCard"
	GlobalCardService_DeleteGlobalCard_FullMethodName       = "/global_card.GlobalCardService/DeleteGlobalCard"
)

// GlobalCardServiceClient is the client API for GlobalCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalCardServiceClient interface {
	CreateGlobalCard(ctx context.Context, in *CreateGlobalCardRequest, opts ...grpc.CallOption) (*CreateGlobalCardResponse, error)
	GetGlobalCardsByDeckID(ctx context.Context, in *GetGlobalCardsByDeckIDRequest, opts ...grpc.CallOption) (*GetGlobalCardsByDeckIDResponse, error)
	UpdateGlobalCard(ctx context.Context, in *UpdateGlobalCardRequest, opts ...grpc.CallOption) (*UpdateGlobalCardResponse, error)
	DeleteGlobalCard(ctx context.Context, in *DeleteGlobalCardRequest, opts ...grpc.CallOption) (*DeleteGlobalCardResponse, error)
}

type globalCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalCardServiceClient(cc grpc.ClientConnInterface) GlobalCardServiceClient {
	return &globalCardServiceClient{cc}
}

func (c *globalCardServiceClient) CreateGlobalCard(ctx context.Context, in *CreateGlobalCardRequest, opts ...grpc.CallOption) (*CreateGlobalCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGlobalCardResponse)
	err := c.cc.Invoke(ctx, GlobalCardService_CreateGlobalCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalCardServiceClient) GetGlobalCardsByDeckID(ctx context.Context, in *GetGlobalCardsByDeckIDRequest, opts ...grpc.CallOption) (*GetGlobalCardsByDeckIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGlobalCardsByDeckIDResponse)
	err := c.cc.Invoke(ctx, GlobalCardService_GetGlobalCardsByDeckID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalCardServiceClient) UpdateGlobalCard(ctx context.Context, in *UpdateGlobalCardRequest, opts ...grpc.CallOption) (*UpdateGlobalCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGlobalCardResponse)
	err := c.cc.Invoke(ctx, GlobalCardService_UpdateGlobalCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalCardServiceClient) DeleteGlobalCard(ctx context.Context, in *DeleteGlobalCardRequest, opts ...grpc.CallOption) (*DeleteGlobalCardResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGlobalCardResponse)
	err := c.cc.Invoke(ctx, GlobalCardService_DeleteGlobalCard_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalCardServiceServer is the server API for GlobalCardService service.
// All implementations must embed UnimplementedGlobalCardServiceServer
// for forward compatibility.
type GlobalCardServiceServer interface {
	CreateGlobalCard(context.Context, *CreateGlobalCardRequest) (*CreateGlobalCardResponse, error)
	GetGlobalCardsByDeckID(context.Context, *GetGlobalCardsByDeckIDRequest) (*GetGlobalCardsByDeckIDResponse, error)
	UpdateGlobalCard(context.Context, *UpdateGlobalCardRequest) (*UpdateGlobalCardResponse, error)
	DeleteGlobalCard(context.Context, *DeleteGlobalCardRequest) (*DeleteGlobalCardResponse, error)
	mustEmbedUnimplementedGlobalCardServiceServer()
}

// UnimplementedGlobalCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlobalCardServiceServer struct{}

func (UnimplementedGlobalCardServiceServer) CreateGlobalCard(context.Context, *CreateGlobalCardRequest) (*CreateGlobalCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalCard not implemented")
}
func (UnimplementedGlobalCardServiceServer) GetGlobalCardsByDeckID(context.Context, *GetGlobalCardsByDeckIDRequest) (*GetGlobalCardsByDeckIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalCardsByDeckID not implemented")
}
func (UnimplementedGlobalCardServiceServer) UpdateGlobalCard(context.Context, *UpdateGlobalCardRequest) (*UpdateGlobalCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalCard not implemented")
}
func (UnimplementedGlobalCardServiceServer) DeleteGlobalCard(context.Context, *DeleteGlobalCardRequest) (*DeleteGlobalCardResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalCard not implemented")
}
func (UnimplementedGlobalCardServiceServer) mustEmbedUnimplementedGlobalCardServiceServer() {}
func (UnimplementedGlobalCardServiceServer) testEmbeddedByValue()                           {}

// UnsafeGlobalCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalCardServiceServer will
// result in compilation errors.
type UnsafeGlobalCardServiceServer interface {
	mustEmbedUnimplementedGlobalCardServiceServer()
}

func RegisterGlobalCardServiceServer(s grpc.ServiceRegistrar, srv GlobalCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedGlobalCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlobalCardService_ServiceDesc, srv)
}

func _GlobalCardService_CreateGlobalCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalCardServiceServer).CreateGlobalCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalCardService_CreateGlobalCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalCardServiceServer).CreateGlobalCard(ctx, req.(*CreateGlobalCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalCardService_GetGlobalCardsByDeckID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalCardsByDeckIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalCardServiceServer).GetGlobalCardsByDeckID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalCardService_GetGlobalCardsByDeckID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalCardServiceServer).GetGlobalCardsByDeckID(ctx, req.(*GetGlobalCardsByDeckIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalCardService_UpdateGlobalCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalCardServiceServer).UpdateGlobalCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalCardService_UpdateGlobalCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalCardServiceServer).UpdateGlobalCard(ctx, req.(*UpdateGlobalCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalCardService_DeleteGlobalCard_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalCardRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalCardServiceServer).DeleteGlobalCard(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalCardService_DeleteGlobalCard_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalCardServiceServer).DeleteGlobalCard(ctx, req.(*DeleteGlobalCardRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalCardService_ServiceDesc is the grpc.ServiceDesc for GlobalCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global_card.GlobalCardService",
	HandlerType: (*GlobalCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGlobalCard",
			Handler:    _GlobalCardService_CreateGlobalCard_Handler,
		},
		{
			MethodName: "GetGlobalCardsByDeckID",
			Handler:    _GlobalCardService_GetGlobalCardsByDeckID_Handler,
		},
		{
			MethodName: "UpdateGlobalCard",
			Handler:    _GlobalCardService_UpdateGlobalCard_Handler,
		},
		{
			MethodName: "DeleteGlobalCard",
			Handler:    _GlobalCardService_DeleteGlobalCard_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/global_card.proto",
}
