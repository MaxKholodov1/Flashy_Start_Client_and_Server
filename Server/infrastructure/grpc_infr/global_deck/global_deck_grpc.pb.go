// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/global_deck.proto

package global_deck

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	GlobalDeckService_CreateGlobalDeck_FullMethodName       = "/global_deck.GlobalDeckService/CreateGlobalDeck"
	GlobalDeckService_GetEditableGlobalDecks_FullMethodName = "/global_deck.GlobalDeckService/GetEditableGlobalDecks"
	GlobalDeckService_UpdateGlobalDeck_FullMethodName       = "/global_deck.GlobalDeckService/UpdateGlobalDeck"
	GlobalDeckService_GetGlobalDeckInfoByID_FullMethodName  = "/global_deck.GlobalDeckService/GetGlobalDeckInfoByID"
	GlobalDeckService_DeleteGlobalDeck_FullMethodName       = "/global_deck.GlobalDeckService/DeleteGlobalDeck"
	GlobalDeckService_SearchGlobalDecks_FullMethodName      = "/global_deck.GlobalDeckService/SearchGlobalDecks"
	GlobalDeckService_AddDeckToLearningDecks_FullMethodName = "/global_deck.GlobalDeckService/AddDeckToLearningDecks"
	GlobalDeckService_AddEditorToGlobalDeck_FullMethodName  = "/global_deck.GlobalDeckService/AddEditorToGlobalDeck"
	GlobalDeckService_DemoteEditorToLearner_FullMethodName  = "/global_deck.GlobalDeckService/DemoteEditorToLearner"
)

// GlobalDeckServiceClient is the client API for GlobalDeckService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type GlobalDeckServiceClient interface {
	CreateGlobalDeck(ctx context.Context, in *CreateGlobalDeckRequest, opts ...grpc.CallOption) (*CreateGlobalDeckResponse, error)
	GetEditableGlobalDecks(ctx context.Context, in *GetEditableDecksRequest, opts ...grpc.CallOption) (*GetEditableDecksResponse, error)
	UpdateGlobalDeck(ctx context.Context, in *UpdateGlobalDeckRequest, opts ...grpc.CallOption) (*UpdateGlobalDeckResponse, error)
	GetGlobalDeckInfoByID(ctx context.Context, in *GetGlobalDeckInfoByIDRequest, opts ...grpc.CallOption) (*GetGlobalDeckInfoByIDResponse, error)
	DeleteGlobalDeck(ctx context.Context, in *DeleteGlobalDeckRequest, opts ...grpc.CallOption) (*DeleteGlobalDeckResponse, error)
	SearchGlobalDecks(ctx context.Context, in *SearchGlobalDecksRequest, opts ...grpc.CallOption) (*SearchGlobalDecksResponse, error)
	AddDeckToLearningDecks(ctx context.Context, in *AddDeckToLearningDecksRequest, opts ...grpc.CallOption) (*AddDeckToLearningDecksResponse, error)
	AddEditorToGlobalDeck(ctx context.Context, in *AddEditorToGlobalDeckRequest, opts ...grpc.CallOption) (*AddEditorToGlobalDeckResponse, error)
	DemoteEditorToLearner(ctx context.Context, in *DemoteEditorToLearnerRequest, opts ...grpc.CallOption) (*DemoteEditorToLearnerResponse, error)
}

type globalDeckServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewGlobalDeckServiceClient(cc grpc.ClientConnInterface) GlobalDeckServiceClient {
	return &globalDeckServiceClient{cc}
}

func (c *globalDeckServiceClient) CreateGlobalDeck(ctx context.Context, in *CreateGlobalDeckRequest, opts ...grpc.CallOption) (*CreateGlobalDeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateGlobalDeckResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_CreateGlobalDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) GetEditableGlobalDecks(ctx context.Context, in *GetEditableDecksRequest, opts ...grpc.CallOption) (*GetEditableDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetEditableDecksResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_GetEditableGlobalDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) UpdateGlobalDeck(ctx context.Context, in *UpdateGlobalDeckRequest, opts ...grpc.CallOption) (*UpdateGlobalDeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateGlobalDeckResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_UpdateGlobalDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) GetGlobalDeckInfoByID(ctx context.Context, in *GetGlobalDeckInfoByIDRequest, opts ...grpc.CallOption) (*GetGlobalDeckInfoByIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetGlobalDeckInfoByIDResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_GetGlobalDeckInfoByID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) DeleteGlobalDeck(ctx context.Context, in *DeleteGlobalDeckRequest, opts ...grpc.CallOption) (*DeleteGlobalDeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DeleteGlobalDeckResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_DeleteGlobalDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) SearchGlobalDecks(ctx context.Context, in *SearchGlobalDecksRequest, opts ...grpc.CallOption) (*SearchGlobalDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(SearchGlobalDecksResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_SearchGlobalDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) AddDeckToLearningDecks(ctx context.Context, in *AddDeckToLearningDecksRequest, opts ...grpc.CallOption) (*AddDeckToLearningDecksResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddDeckToLearningDecksResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_AddDeckToLearningDecks_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) AddEditorToGlobalDeck(ctx context.Context, in *AddEditorToGlobalDeckRequest, opts ...grpc.CallOption) (*AddEditorToGlobalDeckResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(AddEditorToGlobalDeckResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_AddEditorToGlobalDeck_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *globalDeckServiceClient) DemoteEditorToLearner(ctx context.Context, in *DemoteEditorToLearnerRequest, opts ...grpc.CallOption) (*DemoteEditorToLearnerResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(DemoteEditorToLearnerResponse)
	err := c.cc.Invoke(ctx, GlobalDeckService_DemoteEditorToLearner_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// GlobalDeckServiceServer is the server API for GlobalDeckService service.
// All implementations must embed UnimplementedGlobalDeckServiceServer
// for forward compatibility.
type GlobalDeckServiceServer interface {
	CreateGlobalDeck(context.Context, *CreateGlobalDeckRequest) (*CreateGlobalDeckResponse, error)
	GetEditableGlobalDecks(context.Context, *GetEditableDecksRequest) (*GetEditableDecksResponse, error)
	UpdateGlobalDeck(context.Context, *UpdateGlobalDeckRequest) (*UpdateGlobalDeckResponse, error)
	GetGlobalDeckInfoByID(context.Context, *GetGlobalDeckInfoByIDRequest) (*GetGlobalDeckInfoByIDResponse, error)
	DeleteGlobalDeck(context.Context, *DeleteGlobalDeckRequest) (*DeleteGlobalDeckResponse, error)
	SearchGlobalDecks(context.Context, *SearchGlobalDecksRequest) (*SearchGlobalDecksResponse, error)
	AddDeckToLearningDecks(context.Context, *AddDeckToLearningDecksRequest) (*AddDeckToLearningDecksResponse, error)
	AddEditorToGlobalDeck(context.Context, *AddEditorToGlobalDeckRequest) (*AddEditorToGlobalDeckResponse, error)
	DemoteEditorToLearner(context.Context, *DemoteEditorToLearnerRequest) (*DemoteEditorToLearnerResponse, error)
	mustEmbedUnimplementedGlobalDeckServiceServer()
}

// UnimplementedGlobalDeckServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedGlobalDeckServiceServer struct{}

func (UnimplementedGlobalDeckServiceServer) CreateGlobalDeck(context.Context, *CreateGlobalDeckRequest) (*CreateGlobalDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateGlobalDeck not implemented")
}
func (UnimplementedGlobalDeckServiceServer) GetEditableGlobalDecks(context.Context, *GetEditableDecksRequest) (*GetEditableDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetEditableGlobalDecks not implemented")
}
func (UnimplementedGlobalDeckServiceServer) UpdateGlobalDeck(context.Context, *UpdateGlobalDeckRequest) (*UpdateGlobalDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateGlobalDeck not implemented")
}
func (UnimplementedGlobalDeckServiceServer) GetGlobalDeckInfoByID(context.Context, *GetGlobalDeckInfoByIDRequest) (*GetGlobalDeckInfoByIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetGlobalDeckInfoByID not implemented")
}
func (UnimplementedGlobalDeckServiceServer) DeleteGlobalDeck(context.Context, *DeleteGlobalDeckRequest) (*DeleteGlobalDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteGlobalDeck not implemented")
}
func (UnimplementedGlobalDeckServiceServer) SearchGlobalDecks(context.Context, *SearchGlobalDecksRequest) (*SearchGlobalDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SearchGlobalDecks not implemented")
}
func (UnimplementedGlobalDeckServiceServer) AddDeckToLearningDecks(context.Context, *AddDeckToLearningDecksRequest) (*AddDeckToLearningDecksResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDeckToLearningDecks not implemented")
}
func (UnimplementedGlobalDeckServiceServer) AddEditorToGlobalDeck(context.Context, *AddEditorToGlobalDeckRequest) (*AddEditorToGlobalDeckResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddEditorToGlobalDeck not implemented")
}
func (UnimplementedGlobalDeckServiceServer) DemoteEditorToLearner(context.Context, *DemoteEditorToLearnerRequest) (*DemoteEditorToLearnerResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DemoteEditorToLearner not implemented")
}
func (UnimplementedGlobalDeckServiceServer) mustEmbedUnimplementedGlobalDeckServiceServer() {}
func (UnimplementedGlobalDeckServiceServer) testEmbeddedByValue()                           {}

// UnsafeGlobalDeckServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to GlobalDeckServiceServer will
// result in compilation errors.
type UnsafeGlobalDeckServiceServer interface {
	mustEmbedUnimplementedGlobalDeckServiceServer()
}

func RegisterGlobalDeckServiceServer(s grpc.ServiceRegistrar, srv GlobalDeckServiceServer) {
	// If the following call pancis, it indicates UnimplementedGlobalDeckServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&GlobalDeckService_ServiceDesc, srv)
}

func _GlobalDeckService_CreateGlobalDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateGlobalDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).CreateGlobalDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_CreateGlobalDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).CreateGlobalDeck(ctx, req.(*CreateGlobalDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_GetEditableGlobalDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetEditableDecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).GetEditableGlobalDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_GetEditableGlobalDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).GetEditableGlobalDecks(ctx, req.(*GetEditableDecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_UpdateGlobalDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateGlobalDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).UpdateGlobalDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_UpdateGlobalDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).UpdateGlobalDeck(ctx, req.(*UpdateGlobalDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_GetGlobalDeckInfoByID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetGlobalDeckInfoByIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).GetGlobalDeckInfoByID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_GetGlobalDeckInfoByID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).GetGlobalDeckInfoByID(ctx, req.(*GetGlobalDeckInfoByIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_DeleteGlobalDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteGlobalDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).DeleteGlobalDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_DeleteGlobalDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).DeleteGlobalDeck(ctx, req.(*DeleteGlobalDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_SearchGlobalDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(SearchGlobalDecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).SearchGlobalDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_SearchGlobalDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).SearchGlobalDecks(ctx, req.(*SearchGlobalDecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_AddDeckToLearningDecks_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddDeckToLearningDecksRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).AddDeckToLearningDecks(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_AddDeckToLearningDecks_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).AddDeckToLearningDecks(ctx, req.(*AddDeckToLearningDecksRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_AddEditorToGlobalDeck_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddEditorToGlobalDeckRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).AddEditorToGlobalDeck(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_AddEditorToGlobalDeck_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).AddEditorToGlobalDeck(ctx, req.(*AddEditorToGlobalDeckRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _GlobalDeckService_DemoteEditorToLearner_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DemoteEditorToLearnerRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(GlobalDeckServiceServer).DemoteEditorToLearner(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: GlobalDeckService_DemoteEditorToLearner_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(GlobalDeckServiceServer).DemoteEditorToLearner(ctx, req.(*DemoteEditorToLearnerRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// GlobalDeckService_ServiceDesc is the grpc.ServiceDesc for GlobalDeckService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var GlobalDeckService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "global_deck.GlobalDeckService",
	HandlerType: (*GlobalDeckServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateGlobalDeck",
			Handler:    _GlobalDeckService_CreateGlobalDeck_Handler,
		},
		{
			MethodName: "GetEditableGlobalDecks",
			Handler:    _GlobalDeckService_GetEditableGlobalDecks_Handler,
		},
		{
			MethodName: "UpdateGlobalDeck",
			Handler:    _GlobalDeckService_UpdateGlobalDeck_Handler,
		},
		{
			MethodName: "GetGlobalDeckInfoByID",
			Handler:    _GlobalDeckService_GetGlobalDeckInfoByID_Handler,
		},
		{
			MethodName: "DeleteGlobalDeck",
			Handler:    _GlobalDeckService_DeleteGlobalDeck_Handler,
		},
		{
			MethodName: "SearchGlobalDecks",
			Handler:    _GlobalDeckService_SearchGlobalDecks_Handler,
		},
		{
			MethodName: "AddDeckToLearningDecks",
			Handler:    _GlobalDeckService_AddDeckToLearningDecks_Handler,
		},
		{
			MethodName: "AddEditorToGlobalDeck",
			Handler:    _GlobalDeckService_AddEditorToGlobalDeck_Handler,
		},
		{
			MethodName: "DemoteEditorToLearner",
			Handler:    _GlobalDeckService_DemoteEditorToLearner_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/global_deck.proto",
}
