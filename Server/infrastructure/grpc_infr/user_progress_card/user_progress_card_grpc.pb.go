// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: proto/user_progress_card.proto

package user_progress_card

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	UserProgressCardService_GetProgressCardsByDeckID_FullMethodName    = "/user_progress_card.UserProgressCardService/GetProgressCardsByDeckID"
	UserProgressCardService_SubmitProgressCardReview_FullMethodName    = "/user_progress_card.UserProgressCardService/SubmitProgressCardReview"
	UserProgressCardService_SelectNewProgressCards_FullMethodName      = "/user_progress_card.UserProgressCardService/SelectNewProgressCards"
	UserProgressCardService_SelectFamiliarProgressCards_FullMethodName = "/user_progress_card.UserProgressCardService/SelectFamiliarProgressCards"
	UserProgressCardService_GetCardsForTodayReview_FullMethodName      = "/user_progress_card.UserProgressCardService/GetCardsForTodayReview"
)

// UserProgressCardServiceClient is the client API for UserProgressCardService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UserProgressCardServiceClient interface {
	GetProgressCardsByDeckID(ctx context.Context, in *GetProgressCardsByDeckIDRequest, opts ...grpc.CallOption) (*GetProgressCardsByDeckIDResponse, error)
	SubmitProgressCardReview(ctx context.Context, in *CardReviewRequest, opts ...grpc.CallOption) (*CardReviewResponse, error)
	SelectNewProgressCards(ctx context.Context, in *ProgressCards, opts ...grpc.CallOption) (*ProgressCards, error)
	SelectFamiliarProgressCards(ctx context.Context, in *ProgressCards, opts ...grpc.CallOption) (*ProgressCards, error)
	GetCardsForTodayReview(ctx context.Context, in *GetCardsForTodayReviewRequest, opts ...grpc.CallOption) (*ProgressCards, error)
}

type userProgressCardServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUserProgressCardServiceClient(cc grpc.ClientConnInterface) UserProgressCardServiceClient {
	return &userProgressCardServiceClient{cc}
}

func (c *userProgressCardServiceClient) GetProgressCardsByDeckID(ctx context.Context, in *GetProgressCardsByDeckIDRequest, opts ...grpc.CallOption) (*GetProgressCardsByDeckIDResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetProgressCardsByDeckIDResponse)
	err := c.cc.Invoke(ctx, UserProgressCardService_GetProgressCardsByDeckID_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressCardServiceClient) SubmitProgressCardReview(ctx context.Context, in *CardReviewRequest, opts ...grpc.CallOption) (*CardReviewResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CardReviewResponse)
	err := c.cc.Invoke(ctx, UserProgressCardService_SubmitProgressCardReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressCardServiceClient) SelectNewProgressCards(ctx context.Context, in *ProgressCards, opts ...grpc.CallOption) (*ProgressCards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProgressCards)
	err := c.cc.Invoke(ctx, UserProgressCardService_SelectNewProgressCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressCardServiceClient) SelectFamiliarProgressCards(ctx context.Context, in *ProgressCards, opts ...grpc.CallOption) (*ProgressCards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProgressCards)
	err := c.cc.Invoke(ctx, UserProgressCardService_SelectFamiliarProgressCards_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *userProgressCardServiceClient) GetCardsForTodayReview(ctx context.Context, in *GetCardsForTodayReviewRequest, opts ...grpc.CallOption) (*ProgressCards, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ProgressCards)
	err := c.cc.Invoke(ctx, UserProgressCardService_GetCardsForTodayReview_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UserProgressCardServiceServer is the server API for UserProgressCardService service.
// All implementations must embed UnimplementedUserProgressCardServiceServer
// for forward compatibility.
type UserProgressCardServiceServer interface {
	GetProgressCardsByDeckID(context.Context, *GetProgressCardsByDeckIDRequest) (*GetProgressCardsByDeckIDResponse, error)
	SubmitProgressCardReview(context.Context, *CardReviewRequest) (*CardReviewResponse, error)
	SelectNewProgressCards(context.Context, *ProgressCards) (*ProgressCards, error)
	SelectFamiliarProgressCards(context.Context, *ProgressCards) (*ProgressCards, error)
	GetCardsForTodayReview(context.Context, *GetCardsForTodayReviewRequest) (*ProgressCards, error)
	mustEmbedUnimplementedUserProgressCardServiceServer()
}

// UnimplementedUserProgressCardServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedUserProgressCardServiceServer struct{}

func (UnimplementedUserProgressCardServiceServer) GetProgressCardsByDeckID(context.Context, *GetProgressCardsByDeckIDRequest) (*GetProgressCardsByDeckIDResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetProgressCardsByDeckID not implemented")
}
func (UnimplementedUserProgressCardServiceServer) SubmitProgressCardReview(context.Context, *CardReviewRequest) (*CardReviewResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SubmitProgressCardReview not implemented")
}
func (UnimplementedUserProgressCardServiceServer) SelectNewProgressCards(context.Context, *ProgressCards) (*ProgressCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectNewProgressCards not implemented")
}
func (UnimplementedUserProgressCardServiceServer) SelectFamiliarProgressCards(context.Context, *ProgressCards) (*ProgressCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SelectFamiliarProgressCards not implemented")
}
func (UnimplementedUserProgressCardServiceServer) GetCardsForTodayReview(context.Context, *GetCardsForTodayReviewRequest) (*ProgressCards, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetCardsForTodayReview not implemented")
}
func (UnimplementedUserProgressCardServiceServer) mustEmbedUnimplementedUserProgressCardServiceServer() {
}
func (UnimplementedUserProgressCardServiceServer) testEmbeddedByValue() {}

// UnsafeUserProgressCardServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UserProgressCardServiceServer will
// result in compilation errors.
type UnsafeUserProgressCardServiceServer interface {
	mustEmbedUnimplementedUserProgressCardServiceServer()
}

func RegisterUserProgressCardServiceServer(s grpc.ServiceRegistrar, srv UserProgressCardServiceServer) {
	// If the following call pancis, it indicates UnimplementedUserProgressCardServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&UserProgressCardService_ServiceDesc, srv)
}

func _UserProgressCardService_GetProgressCardsByDeckID_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetProgressCardsByDeckIDRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressCardServiceServer).GetProgressCardsByDeckID(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressCardService_GetProgressCardsByDeckID_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressCardServiceServer).GetProgressCardsByDeckID(ctx, req.(*GetProgressCardsByDeckIDRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressCardService_SubmitProgressCardReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CardReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressCardServiceServer).SubmitProgressCardReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressCardService_SubmitProgressCardReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressCardServiceServer).SubmitProgressCardReview(ctx, req.(*CardReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressCardService_SelectNewProgressCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressCards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressCardServiceServer).SelectNewProgressCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressCardService_SelectNewProgressCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressCardServiceServer).SelectNewProgressCards(ctx, req.(*ProgressCards))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressCardService_SelectFamiliarProgressCards_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ProgressCards)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressCardServiceServer).SelectFamiliarProgressCards(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressCardService_SelectFamiliarProgressCards_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressCardServiceServer).SelectFamiliarProgressCards(ctx, req.(*ProgressCards))
	}
	return interceptor(ctx, in, info, handler)
}

func _UserProgressCardService_GetCardsForTodayReview_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetCardsForTodayReviewRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UserProgressCardServiceServer).GetCardsForTodayReview(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: UserProgressCardService_GetCardsForTodayReview_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UserProgressCardServiceServer).GetCardsForTodayReview(ctx, req.(*GetCardsForTodayReviewRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UserProgressCardService_ServiceDesc is the grpc.ServiceDesc for UserProgressCardService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UserProgressCardService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "user_progress_card.UserProgressCardService",
	HandlerType: (*UserProgressCardServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetProgressCardsByDeckID",
			Handler:    _UserProgressCardService_GetProgressCardsByDeckID_Handler,
		},
		{
			MethodName: "SubmitProgressCardReview",
			Handler:    _UserProgressCardService_SubmitProgressCardReview_Handler,
		},
		{
			MethodName: "SelectNewProgressCards",
			Handler:    _UserProgressCardService_SelectNewProgressCards_Handler,
		},
		{
			MethodName: "SelectFamiliarProgressCards",
			Handler:    _UserProgressCardService_SelectFamiliarProgressCards_Handler,
		},
		{
			MethodName: "GetCardsForTodayReview",
			Handler:    _UserProgressCardService_GetCardsForTodayReview_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "proto/user_progress_card.proto",
}
